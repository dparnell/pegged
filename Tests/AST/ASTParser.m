//
//  Generated by pegged 0.5.0
//  Fork: https://github.com/hydrixos/pegged
//  File is auto-generated. Do not modify.
//

#import "ASTParser.h"
#import "ASTNode.h"
#import "stdio.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

NSString *ASTParserErrorStringLocationKey		= @"ASTParserErrorStringLocation";
NSString *ASTParserErrorStringLengthKey		= @"ASTParserErrorStringLength";
NSString *ASTParserErrorStringKey				= @"ASTParserErrorString";

#pragma mark - Internal types

// A block implementing a certain parsing rule
typedef BOOL (^ASTParserRule)(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures);

// A block implementing a certain parser action
typedef id (^ASTParserAction)(ASTParser *self, NSString *text);


/*!
 @abstract Internally used class for storing captured text results for actions.
 */
@interface ASTParserCapture : NSObject

// The position index used for text capturing
@property NSUInteger begin;
@property NSUInteger end;

// The parsed ranged used for this capture
@property NSRange parsedRange;

// The action associated with a capture
@property (copy) ASTParserAction action;

// The count of captured results available to an action
@property NSInteger capturedResultsCount;

// All results captured by the action
@property NSArray *allResults;

// The index of the next result to be read by the action
@property NSInteger nextResultIndex;

@end

@implementation ASTParserCapture
@end


/*!
 @abstract Internal parser methods
 */
@interface ASTParser ()
{
	// The last error state
	NSError *_lastError;
	
	// The rule set used by the parser
	NSMutableDictionary *_rules;
	
	// The current string position
	const char *_cstring;
	NSUInteger _index;
	NSUInteger _limit;
		
	// Specifies whether the parser is currently capturing
	BOOL _capturing;
	
	// All currently matched captures
	NSMutableArray *_captures;
	
	// The results of the last actions
	NSMutableArray *_actionResults;

	// The capture of the currently performed action
	ASTParserCapture *_currentCapture;
	
	// The context used to parameterize parsing.
	NSDictionary *_context;
}

// Public parser state information
@property (readonly) NSUInteger captureStart;
@property (readonly) NSUInteger captureEnd;
@property (readonly) NSString* string;

@property (readonly) NSUInteger index;

@end


@implementation ASTParser

- (id)init
{
    self = [super init];
    
    if (self)
    {
        _rules = [NSMutableDictionary new];

		[self addRule:__AdditiveExpression withName:@"AdditiveExpression"];
		[self addRule:__AdditiveOperator withName:@"AdditiveOperator"];
		[self addRule:__EndOfFile withName:@"EndOfFile"];
		[self addRule:__Equation withName:@"Equation"];
		[self addRule:__Expression withName:@"Expression"];
		[self addRule:__ListExpression withName:@"ListExpression"];
		[self addRule:__MultiplicativeExpression withName:@"MultiplicativeExpression"];
		[self addRule:__MultiplicativeOperator withName:@"MultiplicativeOperator"];
		[self addRule:__NestedExpression withName:@"NestedExpression"];
		[self addRule:__Number withName:@"Number"];
		[self addRule:__PrimaryExpression withName:@"PrimaryExpression"];
		[self addRule:___ withName:@"_"];
    }
    
    return self;
}


#pragma mark - String matching

- (void)beginCapture
{
    if (_capturing) _captureStart = _index;
}

- (void)endCapture
{
    if (_capturing) _captureEnd = _index;
}

- (BOOL)invertWithCaptures:(NSInteger *)localCaptures startIndex:(NSInteger)startIndex block:(ASTParserRule)rule
{
	NSInteger temporaryCaptures = *localCaptures;
	
	// We are in an error state. Just stop.
	if (_lastError)
		return NO;
	
    BOOL matched = ![self matchOneWithCaptures:&temporaryCaptures startIndex:startIndex block:rule];
	if (matched)
		*localCaptures = temporaryCaptures;
	
	return matched;
}

- (BOOL)lookAheadWithCaptures:(NSInteger *)localCaptures startIndex:(NSInteger)startIndex block:(ASTParserRule)rule
{
    NSUInteger index=_index;

	// We are in an error state. Just stop.
	if (_lastError)
		return NO;
	
    BOOL capturing = _capturing;
    _capturing = NO;
	
	NSInteger temporaryCaptures = *localCaptures;
	
    BOOL matched = rule(self, startIndex, &temporaryCaptures);
    _capturing = capturing;
    _index=index;
	_lastError = nil;
	
    return matched;
}

- (BOOL)matchDot
{
    if (_index >= _limit)
		return NO;
	
    ++_index;
    return YES;
}

- (BOOL)matchOneWithCaptures:(NSInteger *)localCaptures startIndex:(NSInteger)startIndex block:(ASTParserRule)rule
{
	// We are in an error state. Just stop.
	if (_lastError)
		return NO;
	
    NSUInteger index=_index, captureCount=[_captures count];
	NSInteger temporaryCaptures = *localCaptures;
	
	// Try to match
    if (rule(self, startIndex, &temporaryCaptures)) {
		*localCaptures = temporaryCaptures;
        return YES;
	}
	
	// Restore old state
    _index=index;
	
    if ([_captures count] > captureCount) {
        NSRange rangeToRemove = NSMakeRange(captureCount, [_captures count]-captureCount);
        [_captures removeObjectsInRange:rangeToRemove];
    }
	
    return NO;
}

- (BOOL)matchManyWithCaptures:(NSInteger *)localCaptures startIndex:(NSInteger)startIndex block:(ASTParserRule)rule
{
	// We are in an error state. Just stop.
	if (_lastError)
		return NO;
	
	// We need at least one match
    if (![self matchOneWithCaptures:localCaptures startIndex:startIndex block:rule])
        return NO;
	
	// Match others
	NSInteger lastIndex = _index;
    while ([self matchOneWithCaptures:localCaptures startIndex:startIndex block:rule]) {
		// The match did not consume any string, but matched. It should be something like (.*)*. So we can stop to prevent an infinite loop.
		if (_index == lastIndex)
			break;
		
		lastIndex = _index;
	}
    
	return YES;
}

- (BOOL)matchRule:(NSString *)ruleName startIndex:(NSInteger)startIndex asserted:(BOOL)asserted
{
    NSArray *rules = [_rules objectForKey: ruleName];

	// We are in an error state. Just stop.
	if (_lastError)
		return NO;
    
	if (![rules count])
        NSLog(@"Couldn't find rule name \"%@\".", ruleName);
	
	for (ASTParserRule rule in rules) {
		NSInteger localCaptures = 0;
		
		if ([self matchOneWithCaptures:&localCaptures startIndex:_index block:rule])
			return YES;
	}

	if (asserted)
		[self setErrorWithMessage: [NSString stringWithFormat: @"Unmatched%@", ruleName] location:startIndex length:(_index - startIndex)];
	
    return NO;
}

- (BOOL)matchString:(char *)literal startIndex:(NSInteger)startIndex asserted:(BOOL)asserted
{
	NSInteger saved = _index;

	while (*literal) {
		if ((_index >= _limit) || (_cstring[_index] != *literal)) {
			_index = saved;
			
			if (asserted)
				[self setErrorWithMessage: [NSString stringWithFormat: @"Missing:%s", literal] location:saved length:(_index - saved + 1)];
			
			return NO;
		}
		++literal;
		++_index;
	}

    return YES;
}

- (BOOL)matchClass:(unsigned char *)bits
{
    if (_index >= _limit) return NO;
	
    int c = [_string characterAtIndex:_index];
    
	if (bits[c >> 3] & (1 << (c & 7))) {
        ++_index;
        return YES;
    }
	
    return NO;
}

- (void)setErrorWithMessage:(NSString *)message location:(NSInteger)location length:(NSInteger)length
{
	if (!_lastError)
		_lastError = [NSError errorWithDomain:NSCocoaErrorDomain code:0 userInfo:@{NSLocalizedDescriptionKey: message, ASTParserErrorStringLocationKey: @(location), ASTParserErrorStringLengthKey: @(length), ASTParserErrorStringKey: [_string copy]}];
}

- (void)clearError
{
	_lastError = nil;
}


#pragma mark - Action handling

- (void)performActionUsingCaptures:(NSInteger)captures startIndex:(NSInteger)startIndex block:(ASTParserAction)action
{
    ASTParserCapture *capture = [ASTParserCapture new];
    
	capture.begin = _captureStart;
    capture.end = _captureEnd;
    
	capture.action = action;
	capture.parsedRange = NSMakeRange(startIndex, _index - startIndex);
	
	capture.capturedResultsCount = captures;

    [_captures addObject:capture];
}

- (void)pushResult:(id)result
{
	[_actionResults addObject: result];
}

- (id)nextResult
{
	return [_currentCapture.allResults objectAtIndex: _currentCapture.nextResultIndex++];
}

- (id)nextResultOrNil
{
	if (_currentCapture.allResults.count >= _currentCapture.nextResultIndex)
		return nil;
	
	return [self nextResult];
}

- (id)resultAtIndex:(NSInteger)index
{
	return [_currentCapture.allResults objectAtIndex: index];
}

- (id)resultAtIndexIfAny:(NSInteger)index
{
	if (index > _currentCapture.allResults.count)
		return nil;
	
	return [self resultAtIndex: index];
}

- (NSInteger)resultCount
{
	return _currentCapture.capturedResultsCount;
}

- (NSArray *)allResults
{
	return _currentCapture.allResults;
}

- (NSRange)rangeForCurrentAction
{
	return _currentCapture.parsedRange;
}


#pragma mark - Rule definitions

- (void)addRule:(ASTParserRule)rule withName:(NSString *)name
{
    NSMutableArray *rules = [_rules objectForKey:name];
    if (!rules) {
        rules = [NSMutableArray new];
        [_rules setObject:rules forKey:name];
    }
    
    [rules addObject:rule];
}

static ASTParserRule __AdditiveExpression = ^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
	if (![parser matchRule: @"MultiplicativeExpression" startIndex:startIndex asserted:NO])
		return NO;
	else
		*localCaptures += 1;
	
	[parser matchOneWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
		if (![parser matchRule: @"_" startIndex:startIndex asserted:NO])
			return NO;
		
		if (![parser matchRule: @"AdditiveOperator" startIndex:startIndex asserted:NO])
			return NO;
		else
			*localCaptures += 1;
		
		if (![parser matchRule: @"_" startIndex:startIndex asserted:NO])
			return NO;
		
		if (![parser matchRule: @"AdditiveExpression" startIndex:startIndex asserted:YES])
			return NO;
		else
			*localCaptures += 1;
	
		return YES;
	}];
	
	[parser performActionUsingCaptures:*localCaptures startIndex:startIndex block:^id(ASTParser *self, NSString *text) {
		 if (self.resultCount == 1) return [self nextResult]; return [ASTNode astNodeWithName:@"ADD" operator:[self resultAtIndex:1] left:[self resultAtIndex:0] right:[self resultAtIndex:2]];
	}];
	
	return YES;
};

static ASTParserRule __AdditiveOperator = ^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
	if (![parser matchOneWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
		if ([parser matchOneWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
			[parser beginCapture];
			
			if (![parser matchString:"+" startIndex:startIndex asserted:NO])
				return NO;
			
			[parser endCapture];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
			[parser beginCapture];
			
			if (![parser matchString:"-" startIndex:startIndex asserted:NO])
				return NO;
			
			[parser endCapture];
		
			return YES;
		}])
			return YES;
	
		return NO;
	}])
		return NO;
	
	[parser performActionUsingCaptures:*localCaptures startIndex:startIndex block:^id(ASTParser *self, NSString *text) {
		 return text;
	}];
	
	return YES;
};

static ASTParserRule __EndOfFile = ^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
	if (![parser lookAheadWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
		if ([parser matchDot])
			return NO;
	
		return YES;
	}])
		return NO;
	
	return YES;
};

static ASTParserRule __Equation = ^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
	if (![parser matchRule: @"_" startIndex:startIndex asserted:NO])
		return NO;
	
	if (![parser matchOneWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
		if ([parser matchOneWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
			if (![parser matchRule: @"Expression" startIndex:startIndex asserted:NO])
				return NO;
			else
				*localCaptures += 1;
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
			[parser setErrorWithMessage: @"InvalidExpression" location:parser.index length:1];
			return NO;
			return YES;
		}])
			return YES;
	
		return NO;
	}])
		return NO;
	
	if (![parser matchRule: @"_" startIndex:startIndex asserted:NO])
		return NO;
	
	if (![parser matchRule: @"EndOfFile" startIndex:startIndex asserted:NO])
		return NO;
	
	[parser performActionUsingCaptures:*localCaptures startIndex:startIndex block:^id(ASTParser *self, NSString *text) {
		 return [self nextResult];
	}];
	
	return YES;
};

static ASTParserRule __Expression = ^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
	if (![parser matchRule: @"_" startIndex:startIndex asserted:NO])
		return NO;
	
	if (![parser matchOneWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
		if ([parser matchOneWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
			if (![parser matchRule: @"AdditiveExpression" startIndex:startIndex asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
			if (![parser matchRule: @"ListExpression" startIndex:startIndex asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		return NO;
	}])
		return NO;
	
	if (![parser matchRule: @"_" startIndex:startIndex asserted:NO])
		return NO;
	
	return YES;
};

static ASTParserRule __ListExpression = ^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
	if (![parser matchString:"[" startIndex:startIndex asserted:NO])
		return NO;
	
	[parser matchOneWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
		if (![parser matchRule: @"Expression" startIndex:startIndex asserted:NO])
			return NO;
		else
			*localCaptures += 1;
	
		return YES;
	}];
	
	[parser matchManyWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
		if (![parser matchString:"," startIndex:startIndex asserted:NO])
			return NO;
		
		if (![parser matchRule: @"Expression" startIndex:startIndex asserted:NO])
			return NO;
		else
			*localCaptures += 1;
	
		return YES;
	}];
	
	if (![parser matchString:"]" startIndex:startIndex asserted:YES])
		return NO;
	
	[parser performActionUsingCaptures:*localCaptures startIndex:startIndex block:^id(ASTParser *self, NSString *text) {
		 return [ASTNode astNodeWithName:@"Additive" operator:@"+" children:self.allResults ];
	}];
	
	return YES;
};

static ASTParserRule __MultiplicativeExpression = ^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
	if (![parser matchRule: @"PrimaryExpression" startIndex:startIndex asserted:NO])
		return NO;
	else
		*localCaptures += 1;
	
	[parser matchOneWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
		if (![parser matchRule: @"_" startIndex:startIndex asserted:NO])
			return NO;
		
		if (![parser matchRule: @"MultiplicativeOperator" startIndex:startIndex asserted:NO])
			return NO;
		else
			*localCaptures += 1;
		
		if (![parser matchRule: @"_" startIndex:startIndex asserted:NO])
			return NO;
		
		if (![parser matchRule: @"MultiplicativeExpression" startIndex:startIndex asserted:YES])
			return NO;
		else
			*localCaptures += 1;
	
		return YES;
	}];
	
	[parser performActionUsingCaptures:*localCaptures startIndex:startIndex block:^id(ASTParser *self, NSString *text) {
		 if (self.resultCount == 1) return [self nextResult]; return [ASTNode astNodeWithName:@"MULT" operator:[self resultAtIndex:1] left:[self resultAtIndex:0] right:[self resultAtIndex:2]];
	}];
	
	return YES;
};

static ASTParserRule __MultiplicativeOperator = ^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
	if (![parser matchOneWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
		if ([parser matchOneWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
			[parser beginCapture];
			
			if (![parser matchString:"*" startIndex:startIndex asserted:NO])
				return NO;
			
			[parser endCapture];
		
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
			[parser beginCapture];
			
			if (![parser matchString:"/" startIndex:startIndex asserted:NO])
				return NO;
			
			[parser endCapture];
		
			return YES;
		}])
			return YES;
	
		return NO;
	}])
		return NO;
	
	[parser performActionUsingCaptures:*localCaptures startIndex:startIndex block:^id(ASTParser *self, NSString *text) {
		 return text;
	}];
	
	return YES;
};

static ASTParserRule __NestedExpression = ^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
	if (![parser matchRule: @"_" startIndex:startIndex asserted:NO])
		return NO;
	
	if (![parser matchString:"(" startIndex:startIndex asserted:NO])
		return NO;
	
	if (![parser matchRule: @"_" startIndex:startIndex asserted:NO])
		return NO;
	
	if (![parser matchRule: @"Expression" startIndex:startIndex asserted:NO])
		return NO;
	
	if (![parser matchRule: @"_" startIndex:startIndex asserted:NO])
		return NO;
	
	if (![parser matchString:")" startIndex:startIndex asserted:YES])
		return NO;
	
	if (![parser matchRule: @"_" startIndex:startIndex asserted:NO])
		return NO;
	
	return YES;
};

static ASTParserRule __Number = ^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
	[parser beginCapture];
	
	if (![parser matchManyWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
		if (![parser matchClass: (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"])
			return NO;
		return YES;
	}])
		return NO;
	
	[parser endCapture];
	
	[parser performActionUsingCaptures:*localCaptures startIndex:startIndex block:^id(ASTParser *self, NSString *text) {
		 return [ASTNode astNodeWithValue: text.integerValue];
	}];
	
	return YES;
};

static ASTParserRule __PrimaryExpression = ^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
	if (![parser matchOneWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
		if ([parser matchOneWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
			if (![parser matchRule: @"NestedExpression" startIndex:startIndex asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		if ([parser matchOneWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
			if (![parser matchRule: @"Number" startIndex:startIndex asserted:NO])
				return NO;
			return YES;
		}])
			return YES;
	
		return NO;
	}])
		return NO;
	
	return YES;
};

static ASTParserRule ___ = ^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
	[parser matchManyWithCaptures:localCaptures startIndex:startIndex block:^(ASTParser *parser, NSInteger startIndex, NSInteger *localCaptures) {
		if (![parser matchString:" " startIndex:startIndex asserted:NO])
			return NO;
		return YES;
	}];
	
	return YES;
};


#pragma mark - Parsing methods

- (NSString *)yyText:(NSUInteger)begin to:(NSUInteger)end
{
    NSInteger len = end - begin;
    if (len <= 0)
        return @"";
    return [_string substringWithRange:NSMakeRange(begin, len)];
}

- (BOOL)parseString:(NSString *)string usingContext:(NSDictionary *)context result:(id *)result
{
	// Prepare parser input
	_string = string;
	#ifndef __PEG_PARSER_CASE_INSENSITIVE__
		_cstring = [_string UTF8String];
	#else
		_cstring = [[_string lowercaseString] UTF8String];
	#endif
		
    // Setup capturing limits
	_limit  = [_string lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
    _index  = 0;
	
	_captures = [NSMutableArray new];
	_actionResults = [NSMutableArray new];

	_captureStart= _captureEnd= _index;
    _capturing = YES;
	_context = context;
    
	// Do string matching
    BOOL matched = [self matchRule: @"Equation" startIndex:_index asserted:YES];
    
	// Process actions
    if (matched) {
		for (ASTParserCapture *capture in _captures) {
			_currentCapture = capture;

			// Prepare results
			NSInteger resultsCount = _currentCapture.capturedResultsCount;
			NSRange resultsRange = NSMakeRange(_actionResults.count - resultsCount, resultsCount);
			
			if (resultsCount) {
				// Read all results
				capture.allResults = [_actionResults subarrayWithRange: resultsRange];
				capture.nextResultIndex = 0;
				
				// Remove results from stack
				[_actionResults removeObjectsInRange: resultsRange];
			}
			
			id result = capture.action(self, [self yyText:capture.begin to:capture.end]);
			if (result) {
				// Set parsing range for diagnostics
				if ([result respondsToSelector: @selector(setSourceString:range:context:)])
					[result setSourceString:_string range:capture.parsedRange context:context];
				
				[self pushResult: result];
			}
		}
		
		// Provide final result if any
		if (_actionResults.count)
			if (result) *result = _actionResults.lastObject;
	}
	
    // Cleanup parser
    _string = nil;
    _cstring = nil;
	_actionResults = nil;
	_context = nil;
	
	return matched;
}


#pragma mark - Helper methods

- (NSInteger)lineNumberForIndex:(NSInteger)index
{
	__block NSInteger line = 0;
	
	[_string enumerateSubstringsInRange:NSMakeRange(0, index >= _string.length ? _string.length-1 : index) options:NSStringEnumerationByLines|NSStringEnumerationSubstringNotRequired usingBlock:^(NSString *substring, NSRange substringRange, NSRange enclosingRange, BOOL *stop) {
		line ++;
	}];
	
	return line;
}

- (NSInteger)columnNumberForIndex:(NSInteger)index
{
	return index - [_string lineRangeForRange: NSMakeRange(index >= _string.length ? _string.length-1 : index, 1)].location;
}

- (NSString *)positionDescriptionForIndex:(NSInteger)index
{
	return [NSString stringWithFormat: @"line: %li, column: %li", [self lineNumberForIndex: index], [self columnNumberForIndex: index]];
}

@end
